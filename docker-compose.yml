version: '3.8'
services:

# Kakfa and Zookeeper
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092" # Port exposed to the host
      - "9093:9093" # Additional port for internal use
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - kafka

# Prometheus and Grafana for performance monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - kafka
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - kafka

# Gateway
  mtogo.gateway:
    container_name: mtogo-gateway
    image: mtogo.gateway
    build:
      context: ./services/MTOGOGateway
      dockerfile: src/OcelotApiGateway/Dockerfile
    ports:
      - "8080:80"
    networks:
      - kafka
      - mtogo-frontend

# Order Service
  mtogo.orders-web: # Web API Server
    container_name: mtogo-orders-web
    image: mtogo.orders.web
    build:
      context: ./services/MTOGOOrders
      dockerfile: src/Orders.Web/Dockerfile
    ports:
      - "8085:80"
    networks:
      - kafka
    expose:
      - "8000"
    depends_on:
      - kafka
      - mssql-orders

  mtogo.orders.grpc: # GRPC Server
    container_name: mtogo-orders-grpc
    image: mtogo.orders.grpc
    build:
      context: ./services/MTOGOOrders
      dockerfile: src/Orders.Grpc/Dockerfile
    ports:
      - "8001:8000"
    networks:
      - kafka
    depends_on:
      - kafka
      - mssql-orders

# Restaurant Service
  mtogo.restaurant-web: # Web API Server
    container_name: mtogo-restaurant-web
    image: mtogo.restaurant.web
    build:
      context: ./services/MTOGORestaurant
      dockerfile: src/Restaurant.Web/Dockerfile
    ports:
      - "8081:80"
    networks:
      - kafka
    depends_on:
      - kafka
      - mssql-restaurant

  mtogo.restaurant.grpc: # GRPC Server
    container_name: mtogo-restaurant-grpc
    image: mtogo.restaurant.grpc
    build:
      context: ./services/MTOGORestaurant
      dockerfile: src/Restaurant.Grpc/Dockerfile
    ports:
      - "8000:8000"
    networks:
      - kafka
    depends_on:
      - kafka
      - mssql-restaurant

  # Auth Service
  mtogo.auth:
    container_name: mtogo-auth
    image: mtogo.auth
    build:
      context: ./services/MTOGOAuth
      dockerfile: src/Auth.Web/Dockerfile
    ports:
      - "8083:80"
    networks:
      - kafka
    depends_on:
    - mssql-users

# Email Service
  mtogo.emails:
    container_name: mtogo-emails
    image: mtogo.emails
    build:
      context: ./services/MTOGOEmails
      dockerfile: src/EmailSender/Dockerfile
    ports:
      - "8087:80"
    networks:
      - kafka

# Feedback Service
  mtogo.feedback:
    container_name: mtogo-feedback
    image: mtogo.feedback
    build:
      context: ./services/MTOGOFeedback
      dockerfile: src/Feedback.Web/Dockerfile
    ports:
      - "8091:80"
    networks:
      - kafka
    expose:
      - "8000"
      - "8001"
    depends_on:
      - mssql-reviews

# Delivery Service
  mtogo.delivery:
    container_name: mtogo-delivery
    image: mtogo.delivery
    build:
      context: ./services/MTOGODelivery
      dockerfile: src/Courier.Web/Dockerfile
    ports:
      - "8084:80"
    networks:
      - kafka
    expose:
      - "8000"
      - "8001"
    depends_on:
      - mssql-deliveries

# React Client
  mtogo.client:
    container_name: mtogo-client
    image: mtogo.client
    build:
      context: ./services/MTOGOClient
      dockerfile: Dockerfile
    ports:
      - "4000:3000"
    networks:
      - mtogo-frontend

# Databases

# Orders DB
  mssql-orders:
    image: mcr.microsoft.com/azure-sql-edge
    container_name: mssql-orders
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: thisIsSuperStrong1234
      SA_PASSWORD: thisIsSuperStrong1234
    ports:
      - "1434:1433"
    volumes:
      - data-orders:/var/opt/mssql
    networks:
      - kafka

# Restaurant DB
  mssql-restaurant:
    image: mcr.microsoft.com/azure-sql-edge
    container_name: mssql-restaurant
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: thisIsSuperStrong1234
      SA_PASSWORD: thisIsSuperStrong1234
    ports:
      - "1433:1433"
    volumes:
      - data:/var/opt/mssql
    networks:
      - kafka

  # User DB
  mssql-users:
    image: mcr.microsoft.com/azure-sql-edge
    container_name: mssql-users
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: thisIsSuperStrong1234
      SA_PASSWORD: thisIsSuperStrong1234
    ports:
      - "1435:1433"
    volumes:
      - data-users:/var/opt/mssql
    networks:
      - kafka

  # Review DB
  mssql-reviews:
      image: mcr.microsoft.com/azure-sql-edge
      container_name: mssql-reviews
      restart: unless-stopped
      environment:
        ACCEPT_EULA: Y
        MSSQL_SA_PASSWORD: thisIsSuperStrong1234
        SA_PASSWORD: thisIsSuperStrong1234
      ports:
        - "1436:1433"
      volumes:
        - data-reviews:/var/opt/mssql
      networks:
        - kafka

  # Delivery DB
  mssql-deliveries:
      image: mcr.microsoft.com/azure-sql-edge
      container_name: mssql-deliveries
      restart: unless-stopped
      environment:
        ACCEPT_EULA: Y
        MSSQL_SA_PASSWORD: thisIsSuperStrong1234
        SA_PASSWORD: thisIsSuperStrong1234
      ports:
        - "1437:1433"
      volumes:
        - data-deliveries:/var/opt/mssql
      networks:
        - kafka

# Configuration
networks:
  kafka:
    name: kafka
  mtogo-frontend:  
    name: mtogo-frontend

volumes:
 data:
 data-orders:
 data-users:
 data-reviews:
 data-deliveries:
 grafana_data:
  external: false
 prometheus_data: {}